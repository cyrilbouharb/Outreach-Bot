var _this=this;var _bookshelf2=require('bookshelf');var _bookshelf3=_interopRequireDefault(_bookshelf2);
var _faker=require('faker');var _faker2=_interopRequireDefault(_faker);
var _=require('../');var _2=_interopRequireDefault(_);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var db=(0,_2.default)();var _bookshelf=
(0,_bookshelf3.default)(db),Model=_bookshelf.Model;

var User=Model.extend({
tableName:'user',
hasTimestamps:true});


describe('jest-mock-knex',function(){
it('parser',function _callee(){var id,at,table,limit,name,value,builder;return regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:
id=[_faker2.default.random.number(),_faker2.default.random.number()].map(String);
at=_faker2.default.date.future();
table=_faker2.default.lorem.word();
limit=_faker2.default.random.number();
name=_faker2.default.lorem.word();
value=[_faker2.default.random.number(),_faker2.default.random.number()];

builder=db(table).
where({at:at}).
whereIn('id',id).
whereNull('deleted_at').
whereNotNull('nickname').
limit(limit);

expect((0,_.parser)(builder.select('*').toSQL())).toEqual(expect.objectContaining({
method:'select',table:table,id:id,at:'DATE',limit:limit,deleted_at:'null',nickname:'not null'}));


expect((0,_.parser)(builder.insert({name:name,value:value,at:at}).toSQL())).toEqual(expect.objectContaining({
method:'insert',table:table,name:name,value:value,at:'DATE'}));


expect((0,_.parser)(builder.update({name:name,value:value,at:at}).toSQL())).toEqual(expect.objectContaining({
method:'update',table:table,id:id,name:name,value:value,at:'DATE',deleted_at:'null',nickname:'not null'}));


expect((0,_.parser)(builder.delete().toSQL())).toEqual(expect.objectContaining({
method:'delete',table:table,id:id,at:'DATE',deleted_at:'null',nickname:'not null'}));case 11:case'end':return _context.stop();}}},null,_this);});



it('client',function _callee2(){var id,at,table,limit,name,value,builder;return regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:
id=_faker2.default.random.number().toString();
at=_faker2.default.date.future();
table=_faker2.default.lorem.word();
limit=_faker2.default.random.number();
name=_faker2.default.lorem.word();
value=[_faker2.default.random.number(),_faker2.default.random.number()];

builder=db(table).
where({id:id,at:at}).
limit(limit).
whereNull('deleted_at').
whereNotNull('nickname');

_.client.mockClear();
_.client.mockImplementation(function(){return[{id:id,name:name,value:value}];});_context2.t0=
expect;_context2.next=12;return regeneratorRuntime.awrap(builder.select('*'));case 12:_context2.t1=_context2.sent;_context2.t2=[{id:id,name:name,value:value}];(0,_context2.t0)(_context2.t1).toEqual(_context2.t2);
expect(_.client).toHaveBeenCalledTimes(1);
expect(_.client).toHaveBeenLastCalledWith(expect.objectContaining({
method:'select',table:table,id:id,at:'DATE',limit:limit,deleted_at:'null',nickname:'not null'}));


_.client.mockReset();
_.client.mockImplementationOnce(function(){return[id];});_context2.t3=
expect;_context2.next=22;return regeneratorRuntime.awrap(builder.insert({name:name,value:value,at:at}));case 22:_context2.t4=_context2.sent;_context2.t5=[id];(0,_context2.t3)(_context2.t4).toEqual(_context2.t5);
expect(_.client).toHaveBeenCalledTimes(1);
expect(_.client).toHaveBeenLastCalledWith(expect.objectContaining({
method:'insert',table:table,name:name,value:value,at:'DATE'}));


_.client.mockClear();
_.client.mockReturnValue([1]);_context2.t6=
expect;_context2.next=32;return regeneratorRuntime.awrap(builder.update({name:name,value:value,at:at}));case 32:_context2.t7=_context2.sent;_context2.t8=[1];(0,_context2.t6)(_context2.t7).toEqual(_context2.t8);
expect(_.client).toHaveBeenCalledTimes(1);
expect(_.client).toHaveBeenLastCalledWith(expect.objectContaining({
method:'update',table:table,id:id,name:name,value:value,at:'DATE',deleted_at:'null',nickname:'not null'}));


_.client.mockReset();
_.client.mockReturnValueOnce([1]);_context2.t9=
expect;_context2.next=42;return regeneratorRuntime.awrap(builder.delete());case 42:_context2.t10=_context2.sent;_context2.t11=[1];(0,_context2.t9)(_context2.t10).toEqual(_context2.t11);
expect(_.client).toHaveBeenCalledTimes(1);
expect(_.client).toHaveBeenLastCalledWith(expect.objectContaining({
method:'delete',table:table,id:id,at:'DATE',deleted_at:'null',nickname:'not null'}));case 47:case'end':return _context2.stop();}}},null,_this);});



it('increment',function _callee3(){return regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return regeneratorRuntime.awrap(
db('batch_tnsert_table').increment('total',10));case 2:
expect(_.client).toMatchSnapshot();case 3:case'end':return _context3.stop();}}},null,_this);});


it('batchInsert',function _callee4(){return regeneratorRuntime.async(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return regeneratorRuntime.awrap(
db.batchInsert('batch_tnsert_table',[{name:'xxx'},{name:'yyy'}]));case 2:_context4.next=4;return regeneratorRuntime.awrap(
db.batchInsert('batch_tnsert_table',[{name:'xxx'},{name:'yyy'},{name:'zzz'}],2));case 4:
expect(_.client).toMatchSnapshot();case 5:case'end':return _context4.stop();}}},null,_this);});


it('bookshelf',function _callee5(){var id,name,value;return regeneratorRuntime.async(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:
id=_faker2.default.random.number();
name=_faker2.default.lorem.word();
value=_faker2.default.random.number();

_.client.mockClear();
_.client.mockImplementation(function(){return[id];});_context5.t0=
expect;_context5.next=8;return regeneratorRuntime.awrap(
new User({name:name,value:value}).save());case 8:_context5.t1=_context5.sent.toJSON();_context5.t2=
{id:id,name:name,value:value};(0,_context5.t0)(_context5.t1).toMatchObject(_context5.t2);
expect(_.client).toHaveBeenCalledTimes(1);

_.client.mockReset();
_.client.mockImplementationOnce(function(){return[{id:id,name:name,value:value}];});_context5.t3=
expect;_context5.next=17;return regeneratorRuntime.awrap(
User.fetchAll());case 17:_context5.t4=_context5.sent.toJSON();_context5.t5=
[{id:id,name:name,value:value}];(0,_context5.t3)(_context5.t4).toEqual(_context5.t5);
expect(_.client).toHaveBeenCalledTimes(1);

_.client.mockClear();
_.client.mockReturnValue([1]);_context5.t6=
expect;_context5.next=26;return regeneratorRuntime.awrap(
new User({id:id,name:name,value:value}).save());case 26:_context5.t7=_context5.sent.toJSON();_context5.t8=
{id:id,name:name,value:value};(0,_context5.t6)(_context5.t7).toMatchObject(_context5.t8);
expect(_.client).toHaveBeenCalledTimes(1);

_.client.mockReset();
_.client.mockReturnValueOnce([1]);_context5.t9=
expect;_context5.next=35;return regeneratorRuntime.awrap(
new User({id:id}).destroy());case 35:_context5.t10=_context5.sent.toJSON();_context5.t11=
{};(0,_context5.t9)(_context5.t10).toEqual(_context5.t11);
expect(_.client).toHaveBeenCalledTimes(1);

_.client.mockReturnThis();case 40:case'end':return _context5.stop();}}},null,_this);});


it('bookshelf when throw error',function _callee6(){var name,Table,user;return regeneratorRuntime.async(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:
name='I\'m error';

Table=Model.extend({
tableName:'table',
hasTimestamps:false});


_.client.mockClear();
_.client.mockReturnValueOnce(new Error('sql error'));
user=new Table({name:name});_context6.next=7;return regeneratorRuntime.awrap(
expect(user.save()).rejects.toMatchSnapshot());case 7:
expect(_.client).toHaveBeenCalledTimes(1);case 8:case'end':return _context6.stop();}}},null,_this);});


it('Sqlite3',function _callee7(){var sqlite,tableName,name;return regeneratorRuntime.async(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:
sqlite=(0,_2.default)({
client:'sqlite',
connection:{filename:':memory:'},
useNullAsDefault:true});


tableName='mtable';
name='yutin';

_.client.mockReset();
_.client.mockClear();_context7.next=7;return regeneratorRuntime.awrap(

sqlite.schema.createTable(tableName,function(table){
table.increments();
table.string('name');
table.timestamps();
}));case 7:_context7.next=9;return regeneratorRuntime.awrap(

sqlite(tableName).insert({name:name}));case 9:_context7.t0=

expect;_context7.next=12;return regeneratorRuntime.awrap(sqlite(tableName).where({id:1}));case 12:_context7.t1=_context7.sent;_context7.t2=[{
id:1,name:name,created_at:null,updated_at:null}];(0,_context7.t0)(_context7.t1).toEqual(_context7.t2);

expect(_.client).toMatchSnapshot();case 16:case'end':return _context7.stop();}}},null,_this);});


it('PostgreSQL',function _callee8(){var pg,tableName,name;return regeneratorRuntime.async(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:
pg=(0,_2.default)({
client:'pg',
connection:{
host:'127.0.0.1',
user:'postgres',
password:null,
database:'mock'}});



tableName='mtable';
name='yutin';

_.client.mockClear();_context8.next=6;return regeneratorRuntime.awrap(

pg.schema.dropTableIfExists(tableName));case 6:_context8.next=8;return regeneratorRuntime.awrap(

pg.schema.createTable(tableName,function(table){
table.increments();
table.string('name');
table.timestamps();
}));case 8:_context8.next=10;return regeneratorRuntime.awrap(

pg(tableName).insert({name:name}));case 10:_context8.t0=

expect;_context8.next=13;return regeneratorRuntime.awrap(pg(tableName).where({id:1}));case 13:_context8.t1=_context8.sent;_context8.t2=[{
id:1,name:name,created_at:null,updated_at:null}];(0,_context8.t0)(_context8.t1).toEqual(_context8.t2);

expect(_.client).toMatchSnapshot();case 17:case'end':return _context8.stop();}}},null,_this);});

});